use tui::layout::{Layout, Constraint, Direction, Rect};
use tui::style::{Style, Color};
use tui::widgets::{Block, Borders, Paragraph, Clear, List, ListItem};
use tui::text::{Spans, Span};
use crossterm::event::{Event, KeyCode};
use crossterm::terminal::{enable_raw_mode, disable_raw_mode};
use super::{BankTui, forms::{Form, FormField}};
use std::io;
use std::sync::Arc;

mod renderer {
    use super::*;
    use crate::bank::Bank;

    pub fn render_customer_list<'a>(bank: &'a Bank) -> List<'a> {
        let customers = bank.list_customers();
        let items: Vec<ListItem> = customers
            .iter()
            .map(|c| {
                ListItem::new(Spans::from(vec![
                    Span::raw(format!("ID: {} - ", c.id)),
                    Span::styled(&c.name, Style::default().fg(Color::Green)),
                ]))
            })
            .collect();

        List::new(items)
            .block(Block::default().title("Customers").borders(Borders::ALL))
            .highlight_style(Style::default().fg(Color::Yellow))
    }

    pub fn render_account_list<'a>(bank: &'a Bank) -> List<'a> {
        let accounts = bank.list_accounts();
        let items: Vec<ListItem> = accounts
            .iter()
            .map(|a| {
                ListItem::new(Spans::from(vec![
                    Span::raw(format!("ID: {} - ", a.id)),
                    Span::styled(&a.name, Style::default().fg(Color::Green)),
                    Span::raw(format!(" (${:.2})", a.balance)),
                ]))
            })
            .collect();

        List::new(items)
            .block(Block::default().title("Accounts").borders(Borders::ALL))
            .highlight_style(Style::default().fg(Color::Yellow))
    }

    pub fn render_account_details<'a>(bank: &'a Bank, id: u64) -> Paragraph<'a> {
        if let Some(account) = bank.get_account(id) {
            let customer = bank.get_customer(account.customer_id)
                .map(|c| c.name.as_str())
                .unwrap_or("Unknown");

            let history: Vec<String> = account.get_history()
                .iter()
                .map(|t| format!("{:?}: ${:.2}", t.tx_type, t.amount))
                .collect();

            let content = format!(
                "Account ID: {}\nCustomer: {}\nType: {}\nBalance: ${:.2}\n\nTransaction History:\n{}",
                account.id,
                customer,
                account.account_type,
                account.balance,
                history.join("\n")
            );

            Paragraph::new(content)
                .block(Block::default().title("Account Details").borders(Borders::ALL))
                .style(Style::default().fg(Color::Green))
        } else {
            Paragraph::new("Account not found")
                .block(Block::default().title("Error").borders(Borders::ALL))
                .style(Style::default().fg(Color::Red))
        }
    }

    pub fn render_transfer_form<'a>() -> Paragraph<'a> {
        let content = "Transfer funds form\n\nFrom Account: [    ]\nTo Account:   [    ]\nAmount:      [    ]";
        
        Paragraph::new(content)
            .block(Block::default().title("Transfer").borders(Borders::ALL))
            .style(Style::default().fg(Color::Green))
    }
}

use renderer::*;

#[derive(PartialEq, Clone)]
pub enum Screen {
    MainMenu,
    CustomerList,
    NewCustomer(Form),
    NewAccount(Form),
    AccountList,
    AccountDetails(u64),
    Transfer,
}

pub fn run_tui(tui: &mut BankTui) -> io::Result<()> {
    enable_raw_mode()?;
    let mut terminal = setup_terminal()?;

    while let Ok(true) = handle_screen(&mut terminal, tui) {}

    disable_raw_mode()?;
    Ok(())
}

fn setup_terminal() -> io::Result<tui::Terminal<tui::backend::CrosstermBackend<io::Stdout>>> {
    let stdout = io::stdout();
    let backend = tui::backend::CrosstermBackend::new(stdout);
    tui::Terminal::new(backend)
}

fn create_customer_form() -> Form {
    Form::new("Create New Customer", vec![
        FormField::new("Name", true, 50),
        FormField::new("Address", true, 100),
        FormField::new("Phone", true, 20)
            .with_validation(Arc::new(|s: &str| s.chars().all(|c| c.is_ascii_digit() || c == '-'))),
        FormField::new("Email", true, 50)
            .with_validation(Arc::new(|s: &str| s.contains('@'))),
    ])
}

fn create_account_form() -> Form {
    Form::new("Create New Account", vec![
        FormField::new("Customer ID", true, 20)
            .with_validation(Arc::new(|s: &str| s.parse::<u64>().is_ok())),
        FormField::new("Account Type", true, 20),
    ])
}

fn handle_screen<B: tui::backend::Backend>(
    terminal: &mut tui::Terminal<B>,
    tui: &mut BankTui,
) -> io::Result<bool> {
    terminal.draw(|f| {
        let size = f.size();
        
        // Header
        let chunks = Layout::default()
            .direction(Direction::Vertical)
            .constraints([
                Constraint::Length(3),  // Title
                Constraint::Min(10),    // Content
                Constraint::Length(3),  // Status
            ].as_ref())
            .split(size);

        let title = render_title(tui.get_screen());
        f.render_widget(title, chunks[0]);

        match tui.get_screen() {
            Screen::MainMenu => render_main_menu(f, chunks[1]),
            Screen::NewCustomer(form) => {
                let area = centered_rect(60, 40, chunks[1]);
                f.render_widget(Clear, area);
                form.render(f, area);
            },
            Screen::NewAccount(form) => {
                let area = centered_rect(60, 30, chunks[1]);
                f.render_widget(Clear, area);
                form.render(f, area);
            },
            Screen::CustomerList => {
                let list = render_customer_list(tui.get_bank());
                let area = centered_rect(80, 60, chunks[1]);
                f.render_widget(Clear, area);
                f.render_widget(list, area);
            },
            Screen::AccountList => {
                let list = render_account_list(tui.get_bank());
                let area = centered_rect(80, 60, chunks[1]);
                f.render_widget(Clear, area);
                f.render_widget(list, area);
            },
            Screen::AccountDetails(id) => {
                let details = render_account_details(tui.get_bank(), *id);
                let area = centered_rect(60, 40, chunks[1]);
                f.render_widget(Clear, area);
                f.render_widget(details, area);
            },
            Screen::Transfer => {
                let form = render_transfer_form();
                let area = centered_rect(60, 40, chunks[1]);
                f.render_widget(Clear, area);
                f.render_widget(form, area);
            }
        }
    })?;

    if let Event::Key(key) = crossterm::event::read()? {
        // We need to match on a clone to avoid borrowing issues
        let current_screen = tui.get_screen().clone();
        
        match current_screen {
            Screen::MainMenu => match key.code {
                KeyCode::Char('1') => tui.set_screen(Screen::NewCustomer(create_customer_form())),
                KeyCode::Char('2') => tui.set_screen(Screen::CustomerList),
                KeyCode::Char('3') => tui.set_screen(Screen::NewAccount(create_account_form())),
                KeyCode::Char('4') => tui.set_screen(Screen::AccountList),
                KeyCode::Char('x') | KeyCode::Char('X') => return Ok(false),
                _ => {}
            },
            Screen::NewCustomer(mut form) => {
                handle_form_input(key.code, &mut form, tui, |values, bank| {
                    bank.create_customer(
                        values[0].clone(),
                        values[1].clone(),
                        values[2].clone(),
                        values[3].clone(),
                    );
                });
            },
            Screen::NewAccount(mut form) => {
                handle_form_input(key.code, &mut form, tui, |values, bank| {
                    if let Ok(customer_id) = values[0].parse::<u64>() {
                        bank.create_account(customer_id, values[1].clone());
                    }
                });
            },
            Screen::CustomerList | Screen::AccountList | Screen::AccountDetails(_) | Screen::Transfer => {
                if key.code == KeyCode::Esc {
                    tui.set_screen(Screen::MainMenu);
                }
            }
        }
        }
    }

    Ok(true)
}

fn render_title(screen: &Screen) -> Paragraph<'static> {
    let title = match screen {
        Screen::MainMenu => "BANKSYSTEM-RS Main Menu",
        Screen::NewCustomer(_) => "Create New Customer",
        Screen::NewAccount(_) => "Create New Account",
        Screen::CustomerList => "Customer List",
        Screen::AccountList => "Account List",
        Screen::AccountDetails(_) => "Account Details",
        Screen::Transfer => "Transfer Funds",
    };

    Paragraph::new(vec![
        Spans::from(vec![
            Span::styled(title, Style::default().fg(Color::Green))
        ]),
    ])
    .style(Style::default())
}

fn render_main_menu<B: tui::backend::Backend>(f: &mut tui::Frame<B>, area: Rect) {
    let menu_items = vec![
        "1. Create New Customer",
        "2. View Customers",
        "3. Create New Account",
        "4. View Accounts",
        "",
        "X. Exit System",
    ];

    let menu = Paragraph::new(menu_items.join("\n"))
        .style(Style::default().fg(Color::Green))
        .block(Block::default().borders(Borders::ALL));

    f.render_widget(menu, area);
}

fn centered_rect(percent_x: u16, percent_y: u16, r: Rect) -> Rect {
    let popup_layout = Layout::default()
        .direction(Direction::Vertical)
        .constraints([
            Constraint::Percentage((100 - percent_y) / 2),
            Constraint::Percentage(percent_y),
            Constraint::Percentage((100 - percent_y) / 2),
        ])
        .split(r);

    Layout::default()
        .direction(Direction::Horizontal)
        .constraints([
            Constraint::Percentage((100 - percent_x) / 2),
            Constraint::Percentage(percent_x),
            Constraint::Percentage((100 - percent_x) / 2),
        ])
        .split(popup_layout[1])[1]
}
